K8S 部署方式实现：
编写Kubernetes部署脚本将httpserer部署到kubernetes集群，思考维度：
- 优雅启动
	应用容器配置了 postStart, 以 exec 的方式在容器的 /usr/share 目录下写入文件 message。只有 postStart 处理函数执行完毕，容器的状态才会变成 RUNNING。
- 优雅终止
	命令 preStop 负责优雅地终止 httpserver 服务。当因为失效而导致容器终止时，这一处理方式很有用。
	应用进程会监听 SIGTERM 信号，PreStop 回调在执行期间,Pod 会变成 Terminating，直到其 terminationGracePeriodSeconds 耗尽为止， 这时 Pod 会被杀死。
- 资源需求和QoS保证
	应用容器配置了 CPU 和Memory的 request 与 limit, 实现 Burstable QoS 类型。
- 探活
	应用容器配置了 livenessProbe, 以 httpGet 的方式访问应用的 /healthz 路径。
- 日常运维需求，日志等级
	可通过配置文件中的 stdout 字段配置日志打印前缀及等级。
- 配置和代码分离
	使用一个 ConfigMap 保存配置文件内容，挂载到应用容器内。ConfigMap 将您的环境配置信息和 容器镜像 解耦，便于应用配置的修改。


除了将httpServer应用优雅的运行在kubernetes上，我们还需要考虑如何将服务发布给对内和对外的调用方。
尝试用Service Ingress将你的服务发布给集群外部的调用方吧
在第一部分基础上提供更加完备的部署spec，包括，不限于：
- Service
- Ingress
可以考虑细节：
- 如何保证整个应用的高可用
从以下两个维度考虑：
 1.部署多副本pod作为冗余备份；
 2.应用Ingress，使用ingress之前要先在k8s集群部署ingress controller，ingress controller本身需要LoadBalancer支持
- 如何通过证书保证httpServer的通讯安全
cert-manager用于自动管理和发布不同发布源的TLS证书。

### K8S环境部署,具体脚本见目录k8s
1.创建命名空间
kubectl create -f namespace.yaml
这个文件如下：
apiVersion: v1
kind: Namespace
metadata:
	name:dev
  labels：
    name：http-server-development
2.部署

kubectl create -f deployment.yaml
kubectl get deployent -ns dev
这个文件如下：
apiVersion: v1
kind: Deployment
metadata:  
  labels:    
    app: httpserver  
  name: httpserver
  namespace:dev
spec:
  template:    
    metadata:      
      creationTimestamp: null      
      labels:        
        app: httpserver
  spec：
    containers:
    - env:            
      - name: httpport              
        valueFrom:               
	  configMapKeyRef:                  
	    key: httpport                  
	    name: myenv
      image:wentingada/httpserver:0.0
      imagePullPolicay:IfNotPresent
      readinessProbe:
        tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
     
      livenessProbe:
        failureThreshold: 3            
	  httpGet:              
	      path: /healthz              
	      port: 8080              
	      scheme: HTTP            
	  initialDelaySeconds: 5            
	  periodSeconds: 10            
	  successThreshold: 1            
	  timeoutSeconds: 1
      lifecycle:
	  postStart:
	    exec:
	      command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
	  preStop:
	    exec:
	      command: [ "/bin/sh","-c","httpserver -s quit; while killall -0 httpserver; do sleep 1; done" ]
	spec:
	  terminationGracePeriodSeconds: 60
	resource:
	  limits:
	    cpu:"500m"
	    memory:"128Mi"
	  request:
	    cpu:"250m"
	    memory:"64Mi"
	volumes:
        - name: config
          configMap:
            name: configfile

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configfile
  namespace: dev
data:
  config.yaml: |
    log:
      prefix: '[HTTP-SERVER]'
      log-file: true
      stdout: 'DEBUG'
      file: 'DEBUG'
      
3.部署服务

可以通过NodePort暴露Node端口给集群外部使用，比较快速，默认端口是30000 ~ 33000的随机端口：
这个文件的内容如下。

apiVersion: v1
kind: Service
metadata:
  name: http-service
  labels:
    app: httpserver
spec:
  selector:
    app: httpserver
  ports:
  - name: httpserver-port
    protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
然后执行下列命令使配置生效。
kubectl create -f service.yaml

也可用Ingress的方式部署服务，使用前需在集群部署ingress controller
##### 通过 helm 安装
helm repo add nginx-stable https://helm.nginx.com/stable
helm install ingress-nginx nginx-stable/nginx-ingress --create-namespace --namespace ingress

##### 安装完成后，ingress 的namespace 中可以看到对应资源
##### 可以部署POD多副本实现高可用；
kubectl apply -f httpserver-replicaset.yaml

服务证书通过cert-manager管理安全性：
##### 安装
helm repo add jetstack https://charts.jetstack.io
helm repo update
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml
helm install \
    cert-manager jetstack/cert-manager \
    --namespace cert-manager \
    --create-namespace \
    --version v1.7.1 \

2.2.3 验证部署
执行以下命令来查看 Pod 部署情况。

kubectl get pods -n dev
输出结果如下。


这时打开浏览器，在地址栏输入 http://<master_node_ip>:8080 就可以看到 httpserver 的界面。
